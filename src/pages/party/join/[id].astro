---
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
const supabaseUrl = "https://nratvbrsbqhnqhsyzrqo.supabase.co";
const supabaseKey = import.meta.env.SUPABASE_KEY;
const user_name = Astro.cookies.get("id");
export const prerender = true
if (typeof user_name === 'undefined') {
  return Astro.redirect('/')
}
const supabase = createRouteHandlerClient(
  { cookies: () => Astro.cookies },
  { supabaseKey: supabaseKey, supabaseUrl: supabaseUrl }
);

const { id } = Astro.params;
if (typeof id !== 'undefined') {
  Astro.cookies.set('party_name', id);

}
const { data: party, error } = await supabase
  .from("party")
  .select("*")
  .eq("party_name", id);

if (party?.length !== 0 && party != null) {
  console.log(party)
    let users : string[] = party[0].children;
    if (users.length >= 3) {
      return Astro.redirect('/main');
    }
    if (users == null) {
      users = [];
    }
    users.push(user_name?.value || "");
  const { data, error } = await supabase
    .from("party")
    .update({ children : users})
    .eq("party_name", id)
    .select();
    if (!error) {
      const {data: user, error} = await supabase
      .from('users')
      .update({'party' : id})
      .eq('name', user_name)
      .select()
      if (error) {
        console.log(error.message);
      
      }
      Astro.cookies.set('party_name', id || "");
        return Astro.redirect('/main')
    }
    else {
        return new Response('Hell');
    }
}
---
